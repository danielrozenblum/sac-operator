/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	"bitbucket.org/accezz-io/sac-operator/model"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Service struct {
	//+kubebuilder:validation:MinLength=0

	// The service name
	Name string `json:"name,omitempty"`

	// The service namespace (default is default)
	// +optional
	Namespace string `json:"namespace"`

	//+kubebuilder:validation:MinLength=0

	// The port name that will be exposed by this application.
	Port string `json:"port,omitempty"`

	// Protocol Schema (default is based on port and application type)
	// +optional
	Schema string `json:"schema,omitempty"`
}

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// ApplicationSpec defines the desired state of Application
type ApplicationSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// The service that will be exposed by this application through Secure-Access-Cloud
	Service Service `json:"service"`

	//+kubebuilder:validation:MinLength=0

	// The site to bind this application. The site should be an existing Site in your Secure Access Cloud tenant
	SiteName string `json:"site"`

	// Type of the application. Valid values are: HTTP/SSH/RDP/TCP/DynamicSSH (default is HTTP)
	// +optional
	Type model.ApplicationType `json:"type"`

	// SubType of the application. Valid values are: AutoGeneratedDomain, CustomDomain, WildCardDomain, RdpSingleMachine, RdpMultipleMachines
	// (default is AutoGeneratedDomain)
	// +optional
	SubType model.ApplicationSubType `json:"subType"`

	// A list of access-policies names to enforce on this application.
	// +optional
	AccessPoliciesNames []string `json:"accessPolicies"`

	// A list of activity-policies names to enforce on this application.
	// +optional
	ActivityPoliciesNames []string `json:"activityPolicies"`

	// +optional (default is true)
	IsVisible bool `json:"is_visible"`

	// +optional (default is false)
	IsNotificationEnabled bool `json:"is_notification_enabled"`

	// +optional (default is true)
	Enabled bool `json:"enabled"`
}

// ApplicationStatus defines the observed state of Application
type ApplicationStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// The application-id in Secure-Access-Cloud backend (if exists)
	// +optional
	Id string `json:"id,omitempty"`

	// Information when was the last time the application was successfully modified by the operator.
	// +optional
	ModifiedOn metav1.Time `json:"modifiedOn,omitempty"`
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// Application is the Schema for the applications API
type Application struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ApplicationSpec   `json:"spec,omitempty"`
	Status ApplicationStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// ApplicationList contains a list of Application
type ApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Application `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Application{}, &ApplicationList{})
}

// ApplicationSpec builder pattern code
type ApplicationSpecBuilder struct {
	applicationSpec *ApplicationSpec
}

func NewApplicationSpecBuilder() *ApplicationSpecBuilder {
	applicationSpec := &ApplicationSpec{}
	b := &ApplicationSpecBuilder{applicationSpec: applicationSpec}
	return b
}

func (b *ApplicationSpecBuilder) Service(service Service) *ApplicationSpecBuilder {
	b.applicationSpec.Service = service
	return b
}

func (b *ApplicationSpecBuilder) SiteName(siteName string) *ApplicationSpecBuilder {
	b.applicationSpec.SiteName = siteName
	return b
}

func (b *ApplicationSpecBuilder) ApplicationType(applicationType model.ApplicationType) *ApplicationSpecBuilder {
	b.applicationSpec.Type = applicationType
	return b
}

func (b *ApplicationSpecBuilder) ApplicationSubType(subType model.ApplicationSubType) *ApplicationSpecBuilder {
	b.applicationSpec.SubType = subType
	return b
}

func (b *ApplicationSpecBuilder) AccessPolicies(accessPolicies []string) *ApplicationSpecBuilder {
	b.applicationSpec.AccessPoliciesNames = accessPolicies
	return b
}

func (b *ApplicationSpecBuilder) ActivityPolicies(activityPolicies []string) *ApplicationSpecBuilder {
	b.applicationSpec.ActivityPoliciesNames = activityPolicies
	return b
}

func (b *ApplicationSpecBuilder) IsVisible(isVisible bool) *ApplicationSpecBuilder {
	b.applicationSpec.IsVisible = isVisible
	return b
}

func (b *ApplicationSpecBuilder) IsNotificationEnabled(isNotificationEnabled bool) *ApplicationSpecBuilder {
	b.applicationSpec.IsNotificationEnabled = isNotificationEnabled
	return b
}

func (b *ApplicationSpecBuilder) Enabled(enabled bool) *ApplicationSpecBuilder {
	b.applicationSpec.Enabled = enabled
	return b
}

func (b *ApplicationSpecBuilder) Build() ApplicationSpec {
	return *b.applicationSpec
}
